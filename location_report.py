#!/usr/bin/env python3

from datetime import datetime

import pandas as pd
from shapely.geometry import Point, Polygon
from shapely.wkt import loads

# WKT polygons of interest
wkt_list = [
    ('SV001',
     'POLYGON ((39.62723562885199 48.04693534452824, 39.63012955325004 48.044862462445906, 39.63773007996204 48.048242811858415, 39.63820710046659 48.05028367012778, 39.629080108138794 48.05173985809651, 39.62723562885199 48.04693534452824))'),
    ('SV010',
     'POLYGON ((39.671386560964805 48.059636384222244, 39.673776520055384 48.05755618352768, 39.67622724081761 48.05841805561835, 39.672730069040995 48.0604034652182, 39.671386560964805 48.059636384222244))'),
    ('SV002',
     'POLYGON ((39.679587392087114 48.07041840322455, 39.681338112326785 48.06775865143965, 39.68392678413474 48.068528593724295, 39.683148686251 48.07090834250772, 39.679587392087114 48.07041840322455))'),
    ('SV003',
     'POLYGON ((39.722560395009566 48.09031493348377, 39.72645272708763 48.090076944098456, 39.72668801486418 48.091900004500104, 39.726298109405946 48.09281600060194, 39.722546949993784 48.09186408275184, 39.722560395009566 48.09031493348377))'),
    ('SV004',
     'POLYGON ((39.63999891997679 48.121408604398965, 39.63999891997679 48.11706196213203, 39.64872698020457 48.11706196213203, 39.64872698020457 48.121408604398965, 39.63999891997679 48.121408604398965))'),
    ('SV005',
     'POLYGON ((39.58238011457226 48.08475148623265, 39.590730539932366 48.087943352763574, 39.5912766167946 48.09339946584208, 39.579922768690324 48.09203169242153, 39.58238011457226 48.08475148623265))'),
    ('SV011',
     'POLYGON ((39.51627517180978 48.158428364349675, 39.51627517180978 48.15095423249113, 39.52365215692808 48.15095423249113, 39.52365215692808 48.158428364349675, 39.51627517180978 48.158428364349675))'),
    ('LU007',
     'POLYGON ((39.24206937032585 48.60874505034437, 39.253785000244875 48.60731862963206, 39.25552579119733 48.61241683909287, 39.244856771793025 48.61375838761043, 39.24206937032585 48.60874505034437))'),
    ('LU008',
     'POLYGON ((39.288700569079055 48.61054428994939, 39.28770086592721 48.60771609372705, 39.29243716447027 48.605353724135824, 39.29574765687744 48.60726096689592, 39.288700569079055 48.61054428994939))'),
    ('LU009',
     'POLYGON ((39.262858689124755 48.58302179177707, 39.261556507350065 48.58051644766741, 39.26473430874563 48.57944156165462, 39.26689664728917 48.58149647087558, 39.262858689124755 48.58302179177707))'),
    ('AMMO-YEGORLYSKAYA',
     'POLYGON ((40.569029793186274 46.583340432569116, 40.569029793186274 46.56430783147667, 40.61388883459213 46.56430783147667, 40.61388883459213 46.583340432569116, 40.569029793186274 46.583340432569116))'),
    ('AMMO-TIKHORETSK',
     'POLYGON ((40.02830377565391 45.88725706984198, 40.033917662118256 45.87890379304619, 40.050969842252044 45.87890379304619, 40.05553112500397 45.897611435310125, 40.04381213701157 45.90132290758194, 40.02830377565391 45.88725706984198))'),
    ('WAGNER-MOLKINO',
     'POLYGON ((39.22660190751253 44.77557192918178, 39.23156576821714 44.79387508517303, 39.223333023634666 44.824195706355454, 39.18580139391838 44.83046398756085, 39.186769952104925 44.76732072227185, 39.22660190751253 44.77557192918178))'),
    ('AMMO-MOZDOK',
     'POLYGON ((44.50872843357914 43.75188625240921, 44.50825915269647 43.72635554634189, 44.53749535171454 43.72764420933254, 44.556172730862016 43.751377778877355, 44.50872843357914 43.75188625240921))'),
    ('AMMO-KOTLUBAN',
     'POLYGON ((44.212507073323565 49.00895901096078, 44.19702407883301 48.99156494660994, 44.23203443840606 48.984219557943675, 44.23346426639358 48.99818559158982, 44.212507073323565 49.00895901096078))'),
    ('AMMO-BARSOVO',
     'POLYGON ((38.730092719696586 56.08541429352621, 38.77701208775241 56.09407903977328, 38.78917636835902 56.1038926912135, 38.77864123247613 56.12666041623234, 38.77179882463443 56.123694109056856, 38.72042646099905 56.10116692782668, 38.730092719696586 56.08541429352621))'),
    ('AMMO-IVANOVO',
     'POLYGON ((41.44955678848831 56.132446783340015, 41.485943954108365 56.139024849818526, 41.49122148194715 56.153492634989135, 41.47497225149806 56.17607315276544, 41.462889490395185 56.17375384843169, 41.46275060808381 56.167027073511804, 41.43247426417091 56.158752297579355, 41.44955678848831 56.132446783340015))'),
    ('AMMO-YUGANETS',
     'POLYGON ((43.20818150762511 56.25660999190768, 43.22329169587775 56.23215207149008, 43.22394866058383 56.226674277268955, 43.25581144885774 56.22813509897213, 43.376035990179986 56.25624506315387, 43.37767840194681 56.29016855476959, 43.24727090767229 56.282146359421176, 43.20818150762511 56.25660999190768))'),
    ('AMMO-BURMAKINO',
     'POLYGON ((40.267760593956666 57.46893309972202, 40.29191360608161 57.43448039653978, 40.33386357450863 57.43542122383391, 40.33100334938956 57.45910499267899, 40.28953008514884 57.47329080575844, 40.267760593956666 57.46893309972202))'),
    ('RV01',
     'POLYGON ((39.34271681982895 48.07680892732276, 39.34533099209011 48.07383127544091, 39.34793271590979 48.076567727299334, 39.343750040294935 48.07818125076372, 39.34271681982895 48.07680892732276))'),
    ('UNK01',
     'POLYGON ((39.129856221064244 48.40054598309919, 39.13166112284546 48.3986578378904, 39.13435182540667 48.399409566842564, 39.13335280221969 48.400833399530796, 39.130675420077296 48.401023535662034, 39.129856221064244 48.40054598309919))'),
    ('UNK02',
     'POLYGON ((33.75859122093627 45.753041985741845, 33.75859122093627 45.742251294552034, 33.76781154119348 45.742251294552034, 33.76781154119348 45.753041985741845, 33.75859122093627 45.753041985741845))'),
    ('UNK03',
     'POLYGON ((33.80073568714042 45.759918906456875, 33.80073568714042 45.751171429594024, 33.80922283974601 45.751171429594024, 33.80922283974601 45.759918906456875, 33.80073568714042 45.759918906456875))')

]


def process_data(csv_file, wkt_list):
    # Read the data from the CSV file
    df = pd.read_csv(csv_file)

    # Sort by time
    df = df.sort_values(by=['Event Time'], ascending=True)

    # Create polygons from WKT
    polygons = [(name, Polygon(loads(wkt))) for name, wkt in wkt_list]

    result = []
    for index, row in df.iterrows():
        point = Point(row['Longitude'], row['Latitude'])
        date = row['Event Time'].split(' ')[0]  # Extract only the date

        for name, polygon in polygons:
            if point.within(polygon):
                # Check if entry for this object, date, and zone already exists
                existing = next((item for item in result
                                 if item['Date'] == date and
                                 item['Entity Id'] == row['Entity Id'] and
                                 item['Location'] == name), None)

                if existing:
                    existing['Last Time'] = row['Event Time']
                else:
                    result.append({
                        'Date': date,
                        'First Time': row['Event Time'],
                        'Last Time': row['Event Time'],
                        'Entity Id': row['Entity Id'],
                        'Location': name
                    })

    # Calculate duration before creating the output DataFrame
    for item in result:
        fmt = '%Y-%m-%d %H:%M:%S'  # Format matching your 'First Time', 'Last Time'
        start_dt = datetime.strptime(item['First Time'], fmt)
        end_dt = datetime.strptime(item['Last Time'], fmt)
        item['Duration'] = end_dt - start_dt

    return result


results = process_data('combined.csv', wkt_list)

# Create output CSV
output_df = pd.DataFrame(results)
output_df.to_csv('location_report.csv', index=False)
